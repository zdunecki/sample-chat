{"version":3,"sources":["api/request.js","api/sdk.js","api/public.js","utils/arrayToObject.js","contexts/ChatContext.js","components/ConversationListItem.js","components/Header.js","components/ConversationList.js","components/Compose.js","components/Message.js","contexts/ChatDOMContext.js","components/MessageList.js","components/Messenger.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","parseResponse","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","json","wrap","_context","prev","next","sent","status","abrupt","stop","this","_x","apply","arguments","request","GET","_GET","_callee2","resource","options","_context2","fetch","concat","assign","method","t0","_x2","_x3","POST","_POST","_callee3","body","_context3","JSON","stringify","_x4","_x5","_x6","UPDATE","_UPDATE","_callee4","_context4","_x7","_x8","_x9","DELETE","_DELETE","_callee5","_context5","_x10","_x11","ChatAPI","Public","Chat","connect","io","path","Message","getChannelLatest","_getChannelLatest","conversationId","arrayToObject","array","keyField","reduce","obj","item","ChatContext","React","createContext","Events","ChannelMessage","PrivateMessage","Join","Connected","BroadcastConnection","ChangeNickname","NicknameChanged","CreateChannel","ChannelCreated","Disconnected","ChatContextProvider","_Component","_getPrototypeOf2","_this","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","socket","state","user","activeConservation","id","isChannel","channels","users","usersMap","messages","getMessages","_getMessages","conservationId","setState","newMessages","changeNickname","nickname","emit","userId","objectSpread","changeActiveConservation","_changeActiveConservation","firstEnter","channelId","console","error","alert","sendChannelMessage","content","senderId","sendPrivateMessage","_ref2","to","from","createChannel","name","ownerId","defineProperty","toConsumableArray","inherits","createClass","key","value","_this2","on","data","newUser","updateUsers","map","channel","conservationMessages","message","createdAt","showTimestamp","showMessageTimestamp","props","scrollBottom","deleteUser","filter","e","react_default","createElement","Provider","children","Component","allConservationMessages","msg","allMessagesLength","dateOne","dateTwo","diff","Math","abs","floor","diffBetweenDatesInMinutes","Date","ChatContextConsumer","Consumer","ConversationListItem","ctx","className","onClick","src","avatar","text","Header","leftItems","middleItems","rightItems","ConversationList","Header_Header","ConversationListItem_ConversationListItem","type","placeholder","onChange","target","Compose","onKeyPress","_ref3","d","messageFrom","isMine","startsSequence","endsSequence","join","getFullYear","getMonth","getDate","getHours","getMinutes","i","slicedToArray","before","after","ChatDomContext","ChatDomContextProvider","messageListDOM","messageListRef","ref","scrollIntoView","behavior","ChatDomContextConsumer","MessageList","input","react","Message_Message","domCTX","style","float","clear","Compose_Compose","onlineUser","Messenger","ConversationList_ConversationList","MessageList_MessageList","App","ChatDOMContext_ChatDomContextProvider","ChatContext_ChatContextProvider","Messenger_Messenger","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.345fa2b0.chunk.js","sourcesContent":["export const API_URL = process.env.API_URL || \"http://localhost:5500\";\n\nconst parseResponse = async response => {\n    const json = await response.json();\n\n    if (response.status >= 400 && response.status < 500) {\n        throw json\n    }\n    return json\n};\n\nexport const request = {\n    GET: async (resource, options) => {\n        try {\n            const response = await fetch(`${API_URL}${resource}`, Object.assign({}, options, {\n                method: \"GET\"\n            }));\n            return await parseResponse(response);\n        } catch (e) {\n            throw e\n        }\n    },\n    POST: async (resource, body, options) => {\n        try {\n            const response = await fetch(`${API_URL}${resource}`, Object.assign({}, options, {\n                method: \"POST\",\n                body: JSON.stringify(body)\n            }));\n            return await parseResponse(response);\n        } catch (e) {\n            throw e\n        }\n    },\n    UPDATE: async (resource, body, options) => {\n        try {\n            const response = await fetch(`${API_URL}${resource}`, Object.assign({}, options, {\n                method: \"UPDATE\",\n                body: JSON.stringify(body)\n            }));\n            return await parseResponse(response);\n        } catch (e) {\n            throw e\n        }\n    },\n    DELETE: async (resource, options) => {\n        try {\n            const response = await fetch(`${API_URL}${resource}`, Object.assign({}, options, {\n                method: \"DELETE\"\n            }));\n            return await parseResponse(response);\n        } catch (e) {\n            throw e\n        }\n    }\n};\n\n\n","import {PublicAPI} from \"./public\";\n\nexport const ChatAPI = {\n    Public: PublicAPI,\n};","import io from \"socket.io-client\";\n\nimport {API_URL, request} from \"./request\";\n\nexport const PublicAPI = {\n    Chat: {\n        connect: () => io(API_URL, {\n            path: '/sockets',\n        }),\n    },\n    Message: {\n        getChannelLatest: async conversationId => await request.GET(`/messages/${conversationId}/latest?isChannel=true`),\n    }\n};","export const arrayToObject = (array, keyField) =>\n    array.reduce((obj, item) => {\n        obj[item[keyField]] = item;\n        return obj\n    }, {});","import React, {Component} from \"react\";\n\nimport {ChatAPI} from \"../api/sdk\";\nimport {arrayToObject} from \"../utils\";\n\nconst ChatContext = React.createContext();\n\nconst Events = {\n    ChannelMessage: 'channel-message',\n    PrivateMessage: 'private-message',\n    Join: 'join',\n    Connected: 'connected',\n    BroadcastConnection: 'broadcast-connection',\n    ChangeNickname: 'change-nickname',\n    NicknameChanged: 'nickname-changed',\n    CreateChannel: 'create-channel',\n    ChannelCreated: 'channel-created',\n    Disconnected: 'disconnected',\n};\n\nexport class ChatContextProvider extends Component {\n    socket = null;\n\n    state = {\n        user: null,\n        activeConservation: {\n            id: null,\n            isChannel: false,\n        },\n        channels: [],\n        users: [],\n        usersMap: {},\n        messages: {},\n        getMessages: async conservationId => {\n            this.setState({messages: this.newMessages(conservationId, [])})\n        },\n        changeNickname: nickname => {\n            this.socket.emit(Events.ChangeNickname, {\n                userId: this.state.user.id,\n                nickname\n            });\n\n            this.setState({\n                user: {...this.state.user, nickname}\n            });\n        },\n        changeActiveConservation: async (conservationId, isChannel) => {\n            const firstEnter = !this.state.messages[conservationId];\n\n            try {\n                if (firstEnter && isChannel) {\n                    const response = await ChatAPI.Public.Message.getChannelLatest(conservationId);\n\n                    this.setState({\n                        messages: this.newMessages(conservationId, response)\n                    });\n                }\n\n                this.socket.emit(Events.Join, {channelId: conservationId});\n\n                this.setState({\n                    activeConservation: {\n                        id: conservationId,\n                        isChannel: isChannel || false\n                    }\n                })\n            } catch (e) {\n                console.error(e);\n                alert(\"Something went wrong during changing conservation\")\n            }\n        },\n        sendChannelMessage: ({content, conservationId}) => {\n            this.socket.emit(Events.ChannelMessage, {senderId: this.state.user.id, conservationId, content});\n        },\n        sendPrivateMessage: ({to, content, conservationId}) => {\n            this.socket.emit(Events.PrivateMessage, {to, from: this.state.user.id, conservationId, content});\n        },\n        createChannel: name => {\n            this.socket.emit(Events.CreateChannel, {ownerId: this.state.user.id, name});\n        }\n    };\n\n    componentDidMount() {\n        try {\n            const socket = ChatAPI.Public.Chat.connect();\n            this.socket = socket;\n\n            socket.on('connected', data => {\n                const newUser = {\n                    id: data.user.id,\n                    nickname: data.user.nickname\n                };\n\n                this.setState({\n                    user: newUser,\n                    activeConservation: {\n                        id: data.user.id,\n                        isChannel: false\n                    }\n                });\n\n                this.state.getMessages(data.user.id);\n\n                socket.emit(Events.Join, {id: data.user.id});\n            });\n\n            socket.on(Events.BroadcastConnection, data => {\n                this.setState({\n                    users: data.users,\n                    usersMap: arrayToObject(data.users, \"id\"),\n                    channels: data.channels\n                });\n            });\n\n            this.socket.on(Events.NicknameChanged, data => {\n                const updateUsers = this.state.users.map(user => {\n                    if (user.id === data.user.id) {\n                        return data.user\n                    }\n\n                    return user;\n                });\n\n                this.setState({\n                    users: updateUsers,\n                    usersMap: arrayToObject(updateUsers, \"id\")\n                })\n            });\n\n            this.socket.on(Events.ChannelCreated, data => {\n                this.setState({\n                    channels: [...this.state.channels, data.channel]\n                });\n            });\n\n            this.socket.on(Events.ChannelMessage, data => {\n                const conservationMessages = this.state.messages[data.message.conservationId];\n\n                this.setState({\n                    messages: this.newMessages(data.message.conservationId, [{\n                        conservationId: data.message.conservationId,\n                        isChannel: data.message.isChannel,\n                        senderId: data.message.senderId,\n                        content: data.message.content,\n                        createdAt: data.message.createdAt,\n                        showTimestamp: showMessageTimestamp(conservationMessages, data.message)\n                    }])\n                });\n\n                this.props.scrollBottom();\n            });\n\n            this.socket.on(Events.PrivateMessage, data => {\n                const mySelfMessage = data.message.to === this.state.user.id;\n\n                if (mySelfMessage) {\n                    this.setState({\n                        messages: this.newMessages(data.message.from, [{\n                            content: data.message.content,\n                            senderId: data.message.from,\n                            createdAt: data.message.createdAt,\n                        }])\n                    })\n                } else {\n                    this.setState({\n                        messages: this.newMessages(data.message.to, [{\n                            content: data.message.content,\n                            senderId: data.message.from,\n                            createdAt: data.message.createdAt,\n                        }])\n                    })\n                }\n\n                this.props.scrollBottom();\n            });\n\n            this.socket.on('disconnected', data => {\n                const deleteUser = this.state.users.filter(user => user.id !== data.userId);\n\n                this.setState({\n                    users: deleteUser,\n                    usersMap: arrayToObject(deleteUser, \"id\")\n                });\n            })\n        } catch (e) {\n            console.error(e);\n            alert(\"Cannot connect with chat\");\n        }\n    }\n\n    newMessages = (conservationId, messages) => {\n        return {\n            ...this.state.messages,\n            [conservationId]: [\n                ...(this.state.messages[conservationId] || []),\n                ...messages\n            ]\n        }\n    };\n\n    render() {\n        return (\n            <ChatContext.Provider value={this.state}>\n                {this.props.children}\n            </ChatContext.Provider>\n        );\n    }\n}\n\nconst diffBetweenDatesInMinutes = (dateOne, dateTwo) => {\n    const diff = Math.abs(dateOne - dateTwo);\n\n    return Math.floor((diff / 1000) / 60);\n};\n\nconst showMessageTimestamp = (allConservationMessages, msg) => {\n    if (!allConservationMessages.length) {\n        return true\n    }\n\n    const allMessagesLength = allConservationMessages.length;\n\n    const previousDate = new Date(allConservationMessages[allMessagesLength - 1].createdAt);\n\n    const diff = diffBetweenDatesInMinutes(previousDate, new Date(msg.createdAt));\n\n    return diff >= 10;\n};\n\nexport const ChatContextConsumer = ChatContext.Consumer;","import React from 'react';\nimport {ChatContextConsumer} from \"../contexts/ChatContext\";\n\nexport const ConversationListItem = ({data, isChannel}) => (\n    <ChatContextConsumer>\n        {\n            ctx => ctx.user && (\n                <div\n                    className={`conversation-list-item ${ctx.activeConservation.id === data.id ? 'conversation-list-item--active' : ''}`}\n                    onClick={() => ctx.changeActiveConservation(data.id, isChannel)}\n                >\n                    <img className=\"conversation-photo\" src={data.avatar}/>\n                    <div className=\"conversation-info\">\n                        {\n                            isChannel\n                                ? <h1 className=\"conversation-title\">#{data.name}</h1>\n                                : <h1 className=\"conversation-title\">\n                                    {\n                                        data.id === ctx.user.id\n                                            ? `${data.nickname} (me)`\n                                            : data.nickname\n                                    }\n                                </h1>\n                        }\n                        <p className=\"conversation-snippet\">{data.text}</p>\n                    </div>\n                </div>\n            )\n        }\n    </ChatContextConsumer>\n);","import React from 'react';\n\nexport const Header = ({leftItems, middleItems, rightItems}) => (\n    <div className=\"toolbar\">\n        <div className=\"left-items\">{leftItems}</div>\n        <div className=\"middle-items\">{middleItems}</div>\n        <div className=\"right-items\">{rightItems}</div>\n    </div>\n);","import React from 'react';\n\nimport {ChatContextConsumer} from \"../contexts/ChatContext\";\nimport {ConversationListItem} from \"./ConversationListItem\";\nimport {Header} from \"./Header\";\n\nexport const ConversationList = () => (\n    <ChatContextConsumer>\n        {\n            ctx => (\n                <div className=\"conversation-list\">\n                    <Header middleItems={<span>Channels and users</span>}>\n                    </Header>\n                    {\n                        ctx.channels.map(channel =>\n                            <ConversationListItem\n                                key={channel.id}\n                                data={channel}\n                                isChannel\n                            />\n                        )\n                    }\n                    {\n                        ctx.users.map(user =>\n                            <ConversationListItem\n                                key={user.id}\n                                data={user}\n                            />\n                        )\n                    }\n                    <div className=\"compose-nickname\">\n                        <div className=\"compose-nickname-wrapper\">\n                            <label>Your nickname</label>\n                            <input\n                                type=\"text\"\n                                value={ctx.user ? ctx.user.nickname : ''}\n                                className=\"compose-nickname-input\"\n                                placeholder=\"Change nickname\"\n                                onChange={e => ctx.changeNickname(e.target.value)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n    </ChatContextConsumer>\n);","import React from 'react';\nimport {ChatContextConsumer} from \"../contexts/ChatContext\";\n\nexport const Compose = () => (\n    <ChatContextConsumer>\n        {\n            ctx => (\n                <div className=\"compose\">\n                    <input\n                        type=\"text\"\n                        className=\"compose-input\"\n                        placeholder=\"Type a message\"\n                        onKeyPress={e => {\n                            if (e.key !== 'Enter') {\n                                return\n                            }\n\n                            if (ctx.activeConservation.isChannel) {\n                                ctx.sendChannelMessage({\n                                    content: e.target.value,\n                                    conservationId: ctx.activeConservation.id\n                                });\n                            } else {\n                                ctx.sendPrivateMessage({\n                                    to: ctx.activeConservation.id,\n                                    content: e.target.value,\n                                    conservationId: ctx.activeConservation.id\n                                });\n                            }\n\n                            e.target.value = '';\n                        }}\n                    />\n                </div>\n            )\n        }\n    </ChatContextConsumer>\n);","import React from 'react';\n\nconst zeroAdditive = (i) => i < 10 ? `0${i}` : i;\n\nconst formattedDate = d => [\n    [d.getFullYear(), '-'],\n    [(d.getMonth() + 1), '-'],\n    [d.getDate(), ' '],\n    [d.getHours(), ':'],\n    [d.getMinutes(), '']\n]\n    .map(([before, after]) => `${zeroAdditive(before)}${after}`)\n    .join('');\n\nexport const Message = ({messageFrom, data, isMine, startsSequence, endsSequence, showTimestamp}) => {\n    return (\n        (\n            <div className={[\n                'message',\n                `${isMine ? 'mine' : ''}`,\n                `${startsSequence ? 'start' : ''}`,\n                `${endsSequence ? 'end' : ''}`\n            ].join(' ')}>\n                {\n                    showTimestamp &&\n                    <div className=\"timestamp\">\n                        {formattedDate(new Date(data.createdAt))}\n                    </div>\n                }\n\n                <div className=\"bubble-container\">\n                    <div className=\"bubble-message-container\">\n                        <span className=\"message-from\">{messageFrom}</span>\n                        <div className=\"bubble\">\n                            {data.content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    )\n};","import React, {Component} from \"react\";\n\nconst ChatDomContext = React.createContext();\n\nexport class ChatDomContextProvider extends Component {\n    messageListDOM = null;\n\n    state = {\n        messageListRef: ref => this.messageListDOM = ref,\n        scrollBottom: () => {\n            this.messageListDOM.scrollIntoView({behavior: 'smooth'});\n        },\n    };\n\n    render() {\n        return (\n            <ChatDomContext.Provider value={this.state}>\n                {this.props.children}\n            </ChatDomContext.Provider>\n        );\n    }\n}\n\nexport const ChatDomContextConsumer = ChatDomContext.Consumer;","import React, {Fragment} from 'react';\n\nimport {Header} from \"./Header\";\nimport {Compose} from \"./Compose\";\nimport {Message} from \"./Message\";\nimport {ChatContextConsumer} from \"../contexts/ChatContext\";\nimport {ChatDomContextConsumer} from \"../contexts/ChatDOMContext\";\n\nexport const MessageList = () => {\n    let input = null;\n\n    return (\n        <ChatContextConsumer>\n            {\n                ctx => (\n                    <div className=\"message-list\">\n                        <Header\n                            rightItems={<Fragment>\n                                <div>\n                                    <input\n                                        ref={ref => input = ref}\n                                        type=\"text\"\n                                        className=\"new-channel-input\"\n                                        placeholder=\"Type a channel name\"\n                                    />\n                                    <button className=\"new-channel-button\" onClick={() => {\n                                        ctx.createChannel(input.value);\n                                        input.value = '';\n                                    }}>New channel\n                                    </button>\n                                </div>\n                            </Fragment>}\n                        />\n                        <div className=\"message-list-container\">\n                            {\n                                (ctx.messages[ctx.activeConservation.id] || []).map((message, i) => (\n                                    <Message\n                                        key={i}\n                                        isMine={message.senderId === ctx.user.id}\n                                        messageFrom={messageFrom(ctx, message)}\n                                        showTimestamp={message.showTimestamp || i === 0}\n                                        data={message}\n                                    />\n                                ))\n                            }\n                        </div>\n\n                        <ChatDomContextConsumer>\n                            {\n                                domCTX => (\n                                    <div style={{float: \"left\", clear: \"both\"}}\n                                         ref={domCTX.messageListRef}/>\n                                )\n                            }\n                        </ChatDomContextConsumer>\n                        <Compose/>\n                    </div>\n                )\n            }\n        </ChatContextConsumer>\n    )\n};\n\nconst messageFrom = (ctx, message) => {\n    const onlineUser = ctx.usersMap[message.senderId];\n\n    if (onlineUser) {\n        return onlineUser.nickname\n    }\n\n    return \"Deleted user\";\n};\n","import React from 'react';\n\nimport {ConversationList} from \"./ConversationList\";\nimport {MessageList} from \"./MessageList\";\n\nexport const Messenger = () => (\n    <div className=\"messenger\">\n        <div className=\"scrollable sidebar\">\n            <ConversationList/>\n        </div>\n\n        <div className=\"scrollable content\">\n            <MessageList/>\n        </div>\n    </div>\n);","import React from 'react';\nimport './App.css';\n\nimport {Messenger} from \"./components/Messenger\";\nimport {ChatContextProvider} from \"./contexts/ChatContext\";\nimport {ChatDomContextConsumer, ChatDomContextProvider} from \"./contexts/ChatDOMContext\";\n\nconst App = () => (\n    <div className=\"App\">\n        <ChatDomContextProvider>\n            <ChatDomContextConsumer>\n                {\n                    ctx => (\n                        <ChatContextProvider scrollBottom={ctx.scrollBottom}>\n                            <Messenger/>\n                        </ChatContextProvider>\n                    )\n                }\n            </ChatDomContextConsumer>\n        </ChatDomContextProvider>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}